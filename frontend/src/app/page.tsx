// frontend/src/app/page.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
// üëá Imports atualizados para incluir mais fun√ß√µes e tipos
import {
  fetchProducts,
  addProduct,
  updateProductData,
  removeProduct,
  Product,
  ProductCreateData,
  ProductUpdateData
} from '../services/api';
import ProductCard from '../components/ProductCard';
import ProductForm from '../components/ProductForm';

export default function HomePage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Estados para o formul√°rio/modal
  const [showForm, setShowForm] = useState<boolean>(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null); // Guarda o produto sendo editado
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  // Fun√ß√£o para carregar produtos da API
  const loadProducts = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await fetchProducts();
      setProducts(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Erro desconhecido ao buscar produtos.");
    } finally {
      setIsLoading(false);
    }
  }, []); // useCallback para evitar recria√ß√£o desnecess√°ria

  // Carrega produtos na montagem inicial
  useEffect(() => {
    loadProducts();
  }, [loadProducts]); // Adiciona loadProducts como depend√™ncia

  // Fun√ß√£o para fechar o formul√°rio e resetar estados relacionados
  const closeForm = () => {
    setShowForm(false);
    setEditingProduct(null);
    setSubmitError(null);
    setIsSubmitting(false);
  };

  // Fun√ß√£o para lidar com o clique no bot√£o "Adicionar Produto"
  const handleShowAddForm = () => {
    setEditingProduct(null); // Garante que n√£o estamos editando
    setShowForm(true);
  };

   // üëá Fun√ß√£o para lidar com o clique no bot√£o "Editar" de um card
  const handleEditClick = (productToEdit: Product) => {
    setEditingProduct(productToEdit); // Define o produto a ser editado
    setShowForm(true); // Abre o formul√°rio
  };

  // üëá Fun√ß√£o unificada para lidar com a submiss√£o do formul√°rio (Criar ou Editar)
  const handleFormSubmit = async (formData: ProductCreateData | ProductUpdateData) => {
    setIsSubmitting(true);
    setSubmitError(null);
    try {
      if (editingProduct) {
        // --- Modo Edi√ß√£o ---
        const updatedProduct = await updateProductData(editingProduct.id, formData as ProductUpdateData);
        // Atualiza a lista localmente substituindo o produto antigo pelo novo
        setProducts(prevProducts =>
          prevProducts.map(p => p.id === editingProduct.id ? updatedProduct : p)
        );
         console.log('Produto atualizado com sucesso!');
      } else {
        // --- Modo Cria√ß√£o ---
        const newProduct = await addProduct(formData as ProductCreateData);
        // Atualiza a lista localmente adicionando o novo produto no in√≠cio
        setProducts(prevProducts => [newProduct, ...prevProducts]);
         console.log('Produto adicionado com sucesso!');
      }
      closeForm(); // Fecha o formul√°rio ap√≥s sucesso
    } catch (err) {
       console.error("Erro ao salvar produto:", err);
       setSubmitError(err instanceof Error ? err.message : "Erro ao salvar produto.");
       // Mant√©m o formul√°rio aberto para o usu√°rio ver o erro
    } finally {
        setIsSubmitting(false);
    }
  };

  // üëá Fun√ß√£o para lidar com o clique no bot√£o "Deletar" de um card
  const handleDeleteClick = async (productId: string) => {
    // Confirma√ß√£o simples do navegador
    if (window.confirm('Tem certeza que deseja excluir este produto? Esta a√ß√£o n√£o pode ser desfeita.')) {
        // Poderia adicionar um estado de loading espec√≠fico para dele√ß√£o se quisesse
        try {
            await removeProduct(productId);
            // Remove o produto da lista localmente ap√≥s sucesso na API
            setProducts(prevProducts => prevProducts.filter(p => p.id !== productId));
             console.log(`Produto ${productId} deletado com sucesso!`);
        } catch (err) {
            console.error(`Erro ao deletar produto ${productId}:`, err);
            // Exibe um alerta ou mensagem de erro mais robusta
            alert(`Erro ao deletar produto: ${err instanceof Error ? err.message : 'Erro desconhecido'}`);
        }
    }
  };

  return (
    <main className="container mx-auto p-4 pt-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-center">Nossos Produtos - PetHonra</h1>
        {/* Bot√£o para mostrar o formul√°rio de adi√ß√£o */}
        <button
          onClick={handleShowAddForm} // Chama a fun√ß√£o para abrir o form em modo ADD
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
        >
          Adicionar Produto
        </button>
      </div>

      {/* Renderiza√ß√£o condicional do Formul√°rio (Modal ou Se√ß√£o) */}
      {/* Aqui usamos uma renderiza√ß√£o simples, idealmente seria um Modal */}
      {showForm && (
         <div className="mb-8 p-4 border rounded-lg bg-gray-50 shadow-md">
            {/* Passa os dados iniciais se estiver editando */}
            <ProductForm
                onSubmit={handleFormSubmit}
                isLoading={isSubmitting}
                initialData={editingProduct} // Passa o produto para edi√ß√£o (ou null se adicionando)
                onCancel={closeForm} // Passa a fun√ß√£o para fechar/cancelar
            />
            {submitError && <p className="text-red-500 mt-2 text-sm">{submitError}</p>}
         </div>
      )}


      {/* Se√ß√£o da Lista de Produtos */}
      {isLoading && <p className="text-center text-gray-500">Carregando produtos...</p>}
      {error && <p className="text-center text-red-500">Erro ao carregar: {error}</p>}
      {!isLoading && !error && (
        <div>
          {products.length === 0 ? (
            <p className="text-center text-gray-600">Nenhum produto encontrado.</p>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {products.map((product) => (
                // üëá Passa as fun√ß√µes de callback para o card
                <ProductCard
                  key={product.id}
                  product={product}
                  onEdit={handleEditClick} // Passa a fun√ß√£o de edi√ß√£o
                  onDelete={handleDeleteClick} // Passa a fun√ß√£o de dele√ß√£o
                />
              ))}
            </div>
          )}
        </div>
      )}
    </main>
  );
}